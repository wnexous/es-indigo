// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @unique @default(uuid())
  email       String       @unique
  name        String
  isRegistred Boolean      @default(false)
  phone       String
  token       String       @unique @default(cuid())
  proofs      proofs[]
  roles       roles[]
  createAt    DateTime     @default(now())
  updateAt    DateTime     @default(now()) @updatedAt
  // enrolleds   enrolled[]
  schoolDays  schoolDays[]
  courses     courses[]
}

model proofs {
  id          String       @id @unique @default(uuid())
  proofBase64 String       @db.LongText
  status      String       @default("pending")
  value       Float
  user        User?        @relation(fields: [userId], references: [id])
  userId      String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @default(now()) @updatedAt
  schoolDays  schoolDays[]
  token       String       @default(cuid()) @db.TinyText
}

model schoolDays {
  id          String   @id @unique @default(uuid())
  teacherName String
  startClass  DateTime
  endClass    DateTime
  userId      String
  user        User?    @relation(fields: [userId], references: [id])
  createAt    DateTime @default(now())
  updateAt    DateTime @default(now()) @updatedAt
  proof       proofs   @relation(fields: [proofsId], references: [id])
  proofsId    String
}

// "teacher" "student" "admin" 
model roles {
  id       String @id @unique @default(uuid())
  user     User?  @relation(fields: [userId], references: [id])
  userId   String
  roleName String
}

model courses {
  id String @id @default(uuid())

  startClass DateTime
  endClass   DateTime
  courseName String
  teacher    User     @relation(fields: [teacherId], references: [id])
  teacherId  String
  price      Float
}

// // Matriculado
// model enrolled {
//   id String @id @default(uuid())

//   user   User   @relation(fields: [userId], references: [id])
//   userId String

//   course    course @relation(fields: [coursesId], references: [id])
//   coursesId String

//   createAt DateTime @default(now())
//   updateAt DateTime @default(now()) @updatedAt

//   @@unique([id, userId, coursesId])
// }

// // Cursos
// model course {
//   id       String      @id @unique @default(uuid())
//   name     String
//   startAt  DateTime
//   endAt    DateTime
//   weekDays courseDay[]

//   address String

//   teacher   teacher @relation(fields: [teacherId], references: [id]) //professor
//   teacherId String

//   cost      Float
//   enrolleds enrolled[] //Pessoas matriculadas no curso

//   isOpen Boolean

//   createAt DateTime @default(now())
//   updateAt DateTime @default(now()) @updatedAt
// }

// model courseDay {
//   id String @id @unique @default(uuid())

//   course   course? @relation(fields: [courseId], references: [id])
//   courseId String?

//   courseWeek   courseWeek @relation(fields: [courseWeekId], references: [id])
//   courseWeekId String
// }

// model courseWeek {
//   id          String      @id @unique @default(uuid())
//   weekNumber  Int
//   weekName    String
//   coursesDays courseDay[]
// }

// model teacher {
//   id    String @id @unique @default(uuid())
//   name  String
//   email String
//   phone String

//   createAt DateTime @default(now())
//   updateAt DateTime @default(now()) @updatedAt

//   courses course[]
// }
